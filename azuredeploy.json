{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "StorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "ServerOsVersion": {
      "type": "string",
      "defaultValue": "2019-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter",
        "2019-Datacenter"
      ]
    },
    "ClientOsVersion":{
      "type":"string",
      "defaultValue":"Windows-10-N-x64",
      "allowedValues": [
        "Win7-SP1-ENT-N-x64",
        "Win81-ENT-N-x64",
        "Windows-10-N-x64"
      ]
    },
    "VmSize": {
      "type": "string",
      "defaultValue": "Basic_A2",
      "allowedValues": [
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ]
    },
    "AdminUserName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "labadmin"
    },
    "AdminPassword": {
      "type": "securestring"
    },
    "AdServerName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Demo-AD"
    },
    "ADFSServerName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Demo-ADFS"
    },
    "WAPServerName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "Demo-WAP"
    },
    "ClientComputerName":{
      "type":"string",
      "minLength": 1,
      "defaultValue": "Demo-Client"
    },
    "DomainName":{
      "type":"string",
      "minLength": 1
    },
    "gatewayType": {
      "type": "string",
      "defaultValue": "Vpn",
      "allowedValues": [
          "Vpn",
          "ExpressRoute"
      ]
    },
    "vpnGatewayGeneration": {
      "type": "string",
      "defaultValue": "Generation1"
    },
    "vpnType": {
      "type": "string",
      "defaultValue": "RouteBased",
      "allowedValues": [
          "RouteBased",
          "PolicyBased"
      ]
    },
    "sku": {
      "type": "string",
      "defaultValue": "VpnGw1"
    },
    /*"AdvDemoWAP-pipDnsName": {
      "type": "string",
      "minLength": 1
    },
    "AdvDemoGatwayDns":{
      "type": "string",
      "minLength": 1
    },
    "AdvDemoClientDNS":{
      "type":"string",
      "minLength": 1
    },*/
    "DSCLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      },
      //"defaultValue": "https://raw.githubusercontent.com/dmcwee/azure/master/AdvancedDemo/AdvancedDemo/DSC/AdvDemoDSC.zip"
      //"defaultValue": "https://github.com/dmcwee/idamlab/blob/master/DSC/AdvDemoDSC.zip?raw=true"
      "defaultValue": "https://raw.githubusercontent.com/dmcwee/idamlab/master/DSC/AdvDemoDSC.zip"
    }
  },
  "variables": {
    "tmpDemoStorageName": "[concat('Storage', uniqueString(resourceGroup().id))]",
    "StorageAccountName": "[toLower(substring(variables('tmpDemoStorageName'), 0, min(16, length(variables('tmpDemoStorageName')))))]",

    "AdvDemoNet": "[concat(resourceGroup().name, '-net')]",

    /* Windows OS Publisher Variables */
    "WindowsServerImagePublisher": "MicrosoftWindowsServer",
    "WindowsServerImageOffer": "WindowsServer",
    "WindowsClientImagePublisher":"MicrosoftVisualStudio",
    "WindowsClientImageOffer":"Windows",

    /* VNet Variables */
    "NetworkPrefix": "10.0.0.0/16",
    "SubNet1Name": "Subnet-1",
    "GatewaySubnet": "GatewaySubnet",
    "SubNet1Prefix": "10.0.0.0/24",
    "GatewaySubnetPrefix":"10.0.2.0/24",
    "VNetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('AdvDemoNet'))]",
    "SubnetReference": "[concat(variables('VNetId'), '/subnets/', variables('SubNet1Name'))]",
    
    /* V-Net Gateway Variable */
    "GatewayName": "[concat(resourceGroup().name, '-GW')]",
    "GatewayNamePip": "[concat(resourceGroup().name, '-GW-PIP')]",
    "GWSubnetReference": "[concat(variables('VNetId'), '/subnets/', variables('GatewaySubnet'))]",

    /* VM VHD Storage location */
    "VhdContainerName": "vhds",

    /* DC VM Variables */
    "ADNicName": "[concat(parameters('AdServerName'), '-NIC')]",
    "ADScheduleName":"[toLower(concat('shutdown-computevm-', parameters('AdServerName')))]",

    /* ADFS VM Variables */
    "ADFSNicName": "[concat(parameters('ADFSServerName'), '-NIC')]",
    "ADFSScheduleName":"[toLower(concat('shutdown-computevm-', parameters('ADFSServerName')))]",

    /* WAP VM Variables */
    "WAPNicName": "[concat(parameters('WAPServerName'), '-NIC')]",
    "WAPPIPName": "[concat(parameters('WAPServerName'), '-PIP')]",
    "WAPScheduleName":"[toLower(concat('shutdown-computevm-', parameters('WAPServerName')))]",

    /* Client VM Variables */
    "ClientNicName":"[concat(parameters('ClientComputerName'), '-NIC')]",
    "ClientPipName":"[concat(parameters('ClientComputerName'), '-PIP')]",
    "ClientScheduleName":"[toLower(concat('shutdown-computevm-', parameters('ClientComputerName')))]",

    "lastVariable": ""
  },
  "resources": [
    /*
    Create Storage Account
    */
    {
      "name": "[variables('StorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2019-04-01",
      "sku": {
        "name": "[parameters('StorageType')]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "StorageAccount"
      },
      "kind": "Storage"
    },

    /*
    Create Virtual Network
    */
    {
      "name": "[variables('AdvDemoNet')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [],
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('NetworkPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('SubNet1Name')]",
            "properties": {
              "addressPrefix": "[variables('SubNet1Prefix')]"
            }
          },
          {
            "name": "[variables('GatewaySubnet')]",
            "properties":{
              "addressPrefix": "[variables('GatewaySubnetPrefix')]"
            }
          }
        ]
      }
    },

    /*
    Create NIC for Domain Controller
    */
    {
      "name": "[variables('ADNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[variables('VNetId')]"
      ],
      "tags": {
        "displayName": "ADNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.10",
              "subnet": {
                "id": "[variables('SubnetReference')]"
              }
            }
          }
        ]
      }
    },

    /*
    Create the Domain Controller
    */
    {
      "name": "[parameters('AdServerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('ADNicName'))]"
      ],
      "tags": {
        "displayName": "ADServer"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('AdServerName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('WindowsServerImagePublisher')]",
            "offer": "[variables('WindowsServerImageOffer')]",
            "sku": "[parameters('ServerOsVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "AdvDemoDCOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('VhdContainerName'), '/', parameters('AdServerName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            /*
            {
              "name": "AdvDemoDCDataDisk",
              "caching": "None",
              "createOption": "Empty",
              "diskSizeGB": "50",
              "lun": 0,
              "vhd": {
                "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('VhdContainerName'), '/', parameters('AdServerName'), '-datadisk.vhd')]"
              }
            }
            */
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ADNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', parameters('AdServerName'))]",
          ],
          "tags": {
            "displayName": "ADDSC"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "configuration": {
                "url": "[parameters('DSCLocation')]",
                "script": "DomainControllerDSC.ps1",
                "function": "Main"
              },
              "configurationArguments": {
                "nodeName": "[parameters('AdServerName')]",
                "domainName":"[parameters('DomainName')]"
              }
            },
            "protectedSettings": {
              "configurationArguments":{
                "adminAccount": {
                  "UserName": "[parameters('AdminUserName')]",
                  "Password": "[parameters('AdminPassword')]"
                }
              }
            }
          }
        }
      ]
    },
    {
      "comments": "",
      "type": "microsoft.devtestlab/schedules",
      "name": "[variables('ADScheduleName')]",
      "apiVersion": "2018-09-15",
      "location": "eastus",
      "scale": null,
      "properties": {
          "status": "Enabled",
          "taskType": "ComputeVmShutdownTask",
          "dailyRecurrence": {
              "time": "1900"
          },
          "timeZoneId": "Eastern Standard Time",
          "notificationSettings": {
              "status": "Disabled",
              "timeInMinutes": 30
          },
          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('AdServerName'))]"
      },
      "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines', parameters('AdServerName'))]"
      ]
  },
    /*
    Create ADFS VM NIC
    */
    {
      "name": "[variables('ADFSNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[variables('VNetId')]"
      ],
      "tags": {
        "displayName": "ADFSNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.11",
              "subnet": {
                "id": "[variables('SubnetReference')]"
              }
            }
          }
        ]
      }
    },
    /*
    Create ADFS VM
    */
    {
      "name": "[parameters('ADFSServerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('ADFSNicName'))]"
      ],
      "tags": {
        "displayName": "ADFSServer"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('ADFSServerName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('WindowsServerImagePublisher')]",
            "offer": "[variables('WindowsServerImageOffer')]",
            "sku": "[parameters('ServerOsVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "AdvDemoADFSOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('VhdContainerName'), '/', parameters('ADFSServerName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ADFSNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', parameters('ADFSServerName'))]"
          ],
          "tags": {
            "displayName": "ADFSDSC"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "configuration": {
                "url": "[parameters('DSCLocation')]",
                "script": "ADFSDSC.ps1",
                "function": "Main"
              },
              "configurationArguments": {
                "nodeName": "[parameters('ADFSServerName')]"
              }
            }
          }
        }
      ]
    },
    {
      "comments": "",
      "type": "microsoft.devtestlab/schedules",
      "name": "[variables('ADFSScheduleName')]",
      "apiVersion": "2018-09-15",
      "location": "eastus",
      "scale": null,
      "properties": {
          "status": "Enabled",
          "taskType": "ComputeVmShutdownTask",
          "dailyRecurrence": {
              "time": "1900"
          },
          "timeZoneId": "Eastern Standard Time",
          "notificationSettings": {
              "status": "Disabled",
              "timeInMinutes": 30
          },
          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('ADFSServerName'))]"
      },
      "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines', parameters('ADFSServerName'))]"
      ]
  },
    /*
    Create WAP NIC
    */
    {
      "name": "[variables('WAPNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[variables('VNetId')]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('WAPPIPName'))]"
      ],
      "tags": {
        "displayName": "WAPNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.12",
              "subnet": {
                "id": "[variables('SubnetReference')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('WAPPIPName'))]"
              }
            }
          }
        ]
      }
    },

    /*
    Create WAP VM
    */
    {
      "name": "[parameters('WAPServerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('WAPNicName'))]"
      ],
      "tags": {
        "displayName": "WAPServer"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('WAPServerName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('WindowsServerImagePublisher')]",
            "offer": "[variables('WindowsServerImageOffer')]",
            "sku": "[parameters('ServerOsVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "AdvDemoWAPOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('VhdContainerName'), '/', parameters('WAPServerName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('WAPNicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-10-01",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', parameters('WAPServerName'))]"
          ],
          "tags": {
            "displayName": "WAPDSC"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "configuration": {
                "url": "[parameters('DSCLocation')]",
                "script": "WAPDSC.ps1",
                "function": "Main"
              },
              "configurationArguments": {
                "nodeName": "[parameters('WAPServerName')]"
              }
            }
          }
        }
      ]
    },
    {
      "comments": "",
      "type": "microsoft.devtestlab/schedules",
      "name": "[variables('WAPScheduleName')]",
      "apiVersion": "2018-09-15",
      "location": "eastus",
      "scale": null,
      "properties": {
          "status": "Enabled",
          "taskType": "ComputeVmShutdownTask",
          "dailyRecurrence": {
              "time": "1900"
          },
          "timeZoneId": "Eastern Standard Time",
          "notificationSettings": {
              "status": "Disabled",
              "timeInMinutes": 30
          },
          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('WAPServerName'))]"
      },
      "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines', parameters('WAPServerName'))]"
      ]
    },
    /*
    Create Public IP for WAP
    */
    {
      "name": "[variables('WAPPIPName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [],
      "tags": {
        "displayName": "WAPPublicIP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
        //, "dnsSettings": {
        //  "domainNameLabel": "[concat(variables('WAPPIPName'), "-wappip")]"
        //}
      }
    },

    {
      "name": "[variables('GatewayNamePip')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [],
      "tags": {
        "displayName": "GatewayPublicIP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
        , "dnsSettings": {
          "domainNameLabel": "[toLower(variables('GatewayName'))]"
        }
      }
    },
    
    {
      "apiVersion": "2019-04-01",
      "name": "[variables('GatewayName')]",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('GatewayNamePip'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('AdvDemoNet'))]"
      ],
      "tags": {},
      "properties": {
          "gatewayType": "[parameters('gatewayType')]",
          "ipConfigurations": [
              {
                  "name": "default",
                  "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                          "id": "[variables('GWSubnetReference')]"
                      },
                      "publicIpAddress": {
                          "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('GatewayNamePip'))]"
                      }
                  }
              }
          ],
          "vpnType": "[parameters('vpnType')]",
          "vpnGatewayGeneration": "[parameters('vpnGatewayGeneration')]",
          "sku": {
              "name": "[parameters('sku')]",
              "tier": "[parameters('sku')]"
          }
      }
    },
    /*
    Create Public IP for Client VM
    */
    {
      "name": "[variables('ClientPipName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [],
      "tags": {
        "displayName": "ClientPublicIP"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
        //, "dnsSettings": {
        //  "domainNameLabel": "[parameters('AdvDemoClientDNS')]"
        //}
      }
    },
    /*
    Create Client NIC
    */
    {
      "name": "[variables('ClientNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[variables('VNetId')]"
        // , "[resourceId('Microsoft.Network/publicIPAddresses', variables('ClientPipName'))]"
      ],
      "tags": {
        "displayName": "ClientNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "10.0.0.13",
              "subnet": {
                "id": "[variables('SubnetReference')]"
              },
              "publicIPAddress": {
                // "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('ClientPipName'))]"
              }
            }
          }
        ]
      }
    },
    /* 
    Create Client VM 
    */
    {
      "name": "[parameters('ClientComputerName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('WAPNicName'))]"
      ],
      "tags": {
        "displayName": "Client-VM"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('ClientComputerName')]",
          "adminUsername": "[parameters('AdminUserName')]",
          "adminPassword": "[parameters('AdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('WindowsClientImagePublisher')]",
            "offer": "[variables('WindowsClientImageOffer')]",
            "sku": "[parameters('ClientOsVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "AdvDemoClientOSDisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('VhdContainerName'), '/', parameters('ClientComputerName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ClientNicName'))]"
            }
          ]
        }
      },
      "resources": []
    },
    {
      "comments": "",
      "type": "microsoft.devtestlab/schedules",
      "name": "[variables('ClientScheduleName')]",
      "apiVersion": "2018-09-15",
      "location": "eastus",
      "scale": null,
      "properties": {
          "status": "Enabled",
          "taskType": "ComputeVmShutdownTask",
          "dailyRecurrence": {
              "time": "1900"
          },
          "timeZoneId": "Eastern Standard Time",
          "notificationSettings": {
              "status": "Disabled",
              "timeInMinutes": 30
          },
          "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('ClientComputerName'))]"
      },
      "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines', parameters('ClientComputerName'))]"
      ]
    }
  ],
  "outputs": {}
}
